Amazone Credential:
u882515@gmail.com

Shaigan Ip:
51.79.51.181

How to Enable Password Authentication in AWS ec2 Instances:

Step 1:
ssh -i "hnh.pem" ubuntu@ec2-3-139-68-29.us-east-2.compute.amazonaws.com

Step 2:
sudo passwd ubuntu(ubuntu is my username)

Step 3:
sudo vim /etc/ssh/sshd_config

*Find the Line containing 'PasswordAuthentication' parameter and change its value from 'no' to 'yes'

*PasswordAuthentication yes

*If you want to set up 'root' login, find  'PermitRootLogin' parameter and change its value from 'prohibit-password' to 'yes'

*PermitRootLogin yes


Step 4:
service ssh restart

Step 5:
ssh ubuntu@ec2-3-139-68-29.us-east-2.compute.amazonaws.com


Root User:
ssh ubuntu@3.143.108.49

Normal User:
ssh shakeeb@3.143.108.49


Git Installation:
sudo apt install git-all

Docker Installation:

1.sudo apt-get update
2.sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common

3.curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
4.sudo apt-get install docker-ce docker-ce-cli containerd.io
5.apt-cache madison docker-ce
6.sudo apt-get install docker-ce docker-ce-cli containerd.io
7.sudo apt install docker.io
8.sudo apt install docker-compose



After deploying the docker container Ec2 Instance:
Allow the port to edit the security group for Example if your docker container run 8005 so edit edit the security group tcp 8005 


Bind a Domain:


sudo vim /etc/nginx/sites-available/clearpricing.ga
sudo ln -s /etc/nginx/sites-available/clearpricing.ga /etc/nginx/sites-enabled
sudo systemctl restart nginx



Create a Reverse Proxy using Ngnix:

server {
    listen 80;
    server_name www.clearpricing.ga;

    location / {

        proxy_pass http://18.119.12.94:8005;
    }
}

Create a Reverse Proxy using Apache:                                                                    
                                                                                              
<VirtualHost *:80>
 ServerName shaigansehat.com
 ServerAlias www.shaigansehat.com
 ProxyPass / http://51.79.51.181:8000/
</VirtualHost>



Transfer local machine file to remote server:
scp -r ./build/* username@server_ip:/var/www/your_domain/html


How i host react using nginix
----------------------------------
1.first upload your build folder.
2.create a reverse proxy using nginx

vim /etc/nginx/sites-enabled/your_domain
server {
        listen 80;
        listen [::]:80;

        root /hnh/deploy/build;
        index index.html index.htm index.nginx-debian.html;

        server_name clearpricing.ml www.clearpricing.ml;

        location / {
                try_files $uri $uri/ =404;
        }
}


####add htc access 


server {
        listen 80;
        listen [::]:80;
        root /hnh/testing/testbuild/build;
        index index.html index.htm index.nginx-debian.html;

        server_name cynotech.ga www.cynotech.ga;

        location ~* \.(?:manifest|appcache|html?|xml|json)$ {
    expires -1;
    # access_log logs/static.log; # I don't usually include a static log
  }

  location ~* \.(?:css|js)$ {
    try_files $uri =404;
    expires 1y;
    access_log off;
    add_header Cache-Control "public";
  }

  # Any route containing a file extension (e.g. /devicesfile.js)
  location ~ ^.+\..+$ {
    try_files $uri =404;
  }

  # Any route that doesn't have a file extension (e.g. /devices)
  location / {
    try_files $uri $uri/ /index.html;
  }
}


3.systemctl restart nginx
-------------------------------------------

How i ssl your domain:
-------------------------------------------
1.sudo apt install certbot python3-certbot-nginx
2.create a proxy file verify the syntax of your configuration:
    * sudo nginx -t
    
3.Reload Nginx to load the new configuration:
    * sudo systemctl reload nginx
    
4.To additionally let in HTTPS traffic, allow the Nginx Full profile and delete the redundant Nginx HTTP profile allowance:
    *sudo ufw allow 'Nginx Full'
    *sudo ufw delete allow 'Nginx HTTP'
    *sudo ufw status
    
    
5.Obtaining an SSL Certificate:
 *sudo certbot --nginx -d example.com -d www.example.com
 
6.Verifying Certbot Auto-Renewal:
    *sudo systemctl status certbot.timer
    *To test the renewal process, you can do a dry run with certbot:
        *sudo certbot renew --dry-run
-------------------------------------------


How i Excess gunicorn server inside the docker using nginx:
1.sudo vim /etc/nginx/sites-available/ngnixguni
2.  server {
    listen 80;
    server_name techbullet.ga www.techbullet.ga;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /hnh/ngnixtest/testing-nginx;
    }

    location /upload/ {
      root /hnh/ngnixtest/testing-nginx;
    }

    location / {
      proxy_pass http://3.143.108.49:8004;
    }
}


3.sudo ln -s /etc/nginx/sites-available/ngnixguni /etc/nginx/sites-enabled/
4.ssl(sudo certbot --nginx -d techbullet.ga -d www.techbullet.ga)
5.systemctl restart nginx






##########################If your root or other user password is not update so try this##################################

chattr -i /etc/gshadow
chattr -i /etc/group
chattr -ai /etc/shadow
chattr -ai /etc/passwd



##################################################Django channels##############################################################
Requirements:

Django==3.2.6
channels
channels_redis
Twisted[tls,http2]

Deployement:
we need a Asynchronous web server for deployment like daphne

docker-compose file:

version: "3.7"
services:
  
  redis:
    restart: always
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - ./redisdata:/data
        proxy_redirect off;
        proxy_pass http://18.119.140.171:8005;
    }
    
    
*reload the ngnix server
*your ssl private key and certification file is present at this location  /etc/letsencrypt/live




#############How i increase the file uploading size in nginx#########################


sudo nano /etc/nginx/nginx.conf
http {
    # [...]
    client_max_body_size 100m;  //add only this line 
    # [...]
}

sudo systemctl restart nginx



######################how to install mysql client ubuntu###########################


1.sudo apt install python3-dev build-essential
2.sudo apt install libssl1.1
3.sudo apt install libssl1.1=1.1.1f-1ubuntu2
4.sudo apt install libssl-dev
5.sudo apt install libmysqlclient-dev
6.pip3 install mysqlclient


####How i use mysql outside the docker container####


docker run -p 3307:3306 --name my-mysql -e MYSQL_ROOT_PASSWORD=root -d mysql/mysql-server:latest
docker exec -it containerid bash
mysql -u root -p
enter the password root
select user,host from mysql.user;
update mysql.user set host='%' where user='root';
flush privileges;
create database clearcost;

*configure phpmyadmin and connect to mysql
    docker run --name dev-phpmyadmin -d --link my-mysql:db -p 7098:80 phpmyadmin/phpmyadmin
      
     DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'clearcost',
        'USER': 'root',
        'PASSWORD': 'root',
        'HOST': '192.168.0.178',
        'PORT': 3307,
        
    }
}



#####################################          Move folder/file from local machine to docker container   ###########################################


docker cp foo.txt container_id:/foo.txt


####################For the created containers use docker update to update restart policy.#######################
docker update --restart=always 0576df221c0b


###Restart container using docker-compose file###################
version: "3.7"
services:
  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/code
    ports:
      - "8005:8000"
    restart: always





###Restart the all the docker container#########
docker restart $(docker ps -q)


########Remove all the none tag images#############
docker rmi $(docker images --filter "dangling=true" -q --no-trunc)


#### Map the current folder outside the container#######################

version: "3.7"
services:
  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:  
      - .:/code
    ports:
      - "8005:8000"
      
      
*The volumes tag is a simple saying: "Hey, map the current folder outside the container (the dot) to the working directory inside the container".



#############################Use Postgre outside the docker########################################################


version: '3.7'
services:
    postgres:
        image: postgres
        restart: always
        expose:
          - "5432"
        ports:
          - 5432:5432
        environment:
          - POSTGRES_DB=postgres
          - POSTGRES_USER=postgres
          - POSTGRES_PASSWORD=postgres
          - POSTGRES_HOST=127.0.0.1
        


#######################################################################



#######################################Auto deployment github##############


mkdir backrepo && cd backrepo
mkdir site.git && cd site.git
git init --bare
cd hooks
vim post-receive
git --work-tree=/hnh/backend/email-sender --git-dir=/hnh/backrepo/site.git checkout -f
chmod +x post-receive
git remote add live root@139.99.238.238/hnh/backrepo/site.git



###########################################################################
Nginx Load balancing using round robin


upstream endpoint1 {
 server 18.119.140.171:8005;
 server 18.119.140.171:8006;



}
server {
    listen 80;
    server_name beta.jawadsheikh.ml;

    location / {

        proxy_pass http://endpoint1;
    }
}


Nginx Load balancing using wighted approach

upstream endpoint1 {
 server 18.119.140.171:8005;  ##means weight=1
 server 18.119.140.171:8006 weight=2; #means ya server zada powerful ha ya zada request handle karaga weight=2 means 2 bar is per request aye phr 1 bar weight=1 wala pa jaye gi:wq
 



}
server {
    listen 80;
    server_name beta.jawadsheikh.ml;

    location / {

        proxy_pass http://endpoint1;
    }
}


Nginx Load balancing using least connection

upstream endpoint1 {
  least_conn;
  server 18.119.140.171:8005; 
  server 18.119.140.171:8006; 



}
server {
    listen 80;
    server_name beta.jawadsheikh.ml;

    location / {

        proxy_pass http://endpoint1;
    }
}



###########################################################################
How i Increase ssh timeout

ssh -o ServerAliveInterval=300 root@shakeeb.ml

#############################################################################





###Docker swarm installation #############################################
https://medium.com/crowdbotics/a-complete-one-by-one-guide-to-install-docker-on-your-mac-os-using-homebrew-e818eb4cfc3


#Docker swarm 

Create a virtual machine:
 docker-machine create --driver virtualbox machine-name

Check no of macine:
 docker-machine ls

Enter into specific machine:
 docker-machine ssh machine-name
##########################################################################

Install Docker in Aws Ami:

sudo yum update -y
sudo amazon-linux-extras install docker
sudo yum install docker
sudo service docker start
sudo usermod -a -G docker ec2-user
sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` | sudo tee /usr/local/bin/docker-compose > /dev/null
sudo chmod +x /usr/local/bin/docker-compose
ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
docker-compose --version



Check which service use port 80:

1.netstat -lntp | grep 80

How i kill service running in port 80:

2.sudo kill $(sudo netstat -anp | awk '/ LISTEN / {if($4 ~ ":80$") { gsub("/.*","",$7); print $7; exit } }')



###########################################################################


Serve static files using docker nginx:

Install Nginx:
docker pull nginx

Then:
 docker run -d -p 8000:80 -v /Users/admin/Desktop/aws:/usr/share/nginx/html --name my-nginx nginx


#############################################################################





